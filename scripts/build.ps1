# Cross-platform build script for Go DWG Extractor
# Generated by the build system - supports Windows, Linux, and macOS builds

param(
    [string]$Command = "all",
    [string]$Version = "v0.1.0-dev",
    [string]$GitCommit = ""
)

$ErrorActionPreference = "Stop"

# Configuration
$ProjectName = "go-dwg-extractor"
$DistDir = "dist"
$BuildTime = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")

if (-not $GitCommit) {
    try {
        $GitCommit = (git rev-parse --short HEAD 2>$null)
    } catch {
        $GitCommit = "unknown"
    }
}

# Build platforms
$Platforms = @(
    @{GOOS="windows"; GOARCH="amd64"},
    @{GOOS="linux"; GOARCH="amd64"},
    @{GOOS="darwin"; GOARCH="amd64"},
    @{GOOS="darwin"; GOARCH="arm64"}
)

# Functions
function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

# Check prerequisites
function Test-Prerequisites {
    Write-Info "Checking prerequisites..."
    
    try {
        $null = Get-Command go -ErrorAction Stop
    } catch {
        Write-Error "Go is not installed or not in PATH"
        exit 1
    }
    
    try {
        $null = Get-Command git -ErrorAction Stop
    } catch {
        Write-Warning "Git is not installed - version info may be incomplete"
    }
    
    Write-Success "Prerequisites check completed"
}

# Clean previous builds
function Invoke-Clean {
    Write-Info "Cleaning previous builds..."
    if (Test-Path $DistDir) {
        Remove-Item -Recurse -Force $DistDir
    }
    Write-Success "Clean completed"
}

# Build for a specific platform
function Invoke-PlatformBuild {
    param($Platform)
    
    $OutputName = $ProjectName
    if ($Platform.GOOS -eq "windows") {
        $OutputName = "$OutputName.exe"
    }
    
    $OutputDir = Join-Path $DistDir "$($Platform.GOOS)-$($Platform.GOARCH)"
    $OutputPath = Join-Path $OutputDir $OutputName
    
    Write-Info "Building for $($Platform.GOOS)/$($Platform.GOARCH)..."
    
    # Create output directory
    New-Item -ItemType Directory -Force -Path $OutputDir | Out-Null
    
    # Build with version information
    $LdFlags = "-X main.version=$Version -X main.gitCommit=$GitCommit -X main.buildTime=$BuildTime"
    
    $env:GOOS = $Platform.GOOS
    $env:GOARCH = $Platform.GOARCH
    
    try {
        & go build -ldflags $LdFlags -o $OutputPath .
        
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Built $OutputPath"
            
            # Copy additional files
            if (Test-Path "README.md") {
                Copy-Item "README.md" $OutputDir
            } else {
                Write-Warning "README.md not found"
            }
            
            if (Test-Path "LICENSE") {
                Copy-Item "LICENSE" $OutputDir
            } else {
                Write-Warning "LICENSE not found"
            }
            
            return $true
        } else {
            Write-Error "Failed to build for $($Platform.GOOS)/$($Platform.GOARCH)"
            return $false
        }
    } catch {
        Write-Error "Build failed: $($_.Exception.Message)"
        return $false
    }
}

# Build all platforms
function Invoke-BuildAll {
    Write-Info "Starting cross-platform build..."
    Write-Info "Version: $Version"
    Write-Info "Git Commit: $GitCommit"
    Write-Info "Build Time: $BuildTime"
    Write-Host
    
    $FailedBuilds = @()
    
    foreach ($Platform in $Platforms) {
        if (-not (Invoke-PlatformBuild $Platform)) {
            $FailedBuilds += "$($Platform.GOOS)/$($Platform.GOARCH)"
        }
        Write-Host
    }
    
    if ($FailedBuilds.Count -eq 0) {
        Write-Success "All builds completed successfully!"
        return $true
    } else {
        Write-Error "Some builds failed: $($FailedBuilds -join ', ')"
        return $false
    }
}

# Create packages
function Invoke-Package {
    Write-Info "Creating distribution packages..."
    
    foreach ($Platform in $Platforms) {
        $BuildDir = Join-Path $DistDir "$($Platform.GOOS)-$($Platform.GOARCH)"
        
        if (-not (Test-Path $BuildDir)) {
            Write-Warning "Build directory $BuildDir not found, skipping packaging"
            continue
        }
        
        $PackageName = "$ProjectName-$($Platform.GOOS)-$($Platform.GOARCH)"
        
        Push-Location $BuildDir
        
        try {
            if ($Platform.GOOS -eq "windows") {
                # Create ZIP for Windows
                $ZipPath = Join-Path ".." "$PackageName.zip"
                if (Get-Command Compress-Archive -ErrorAction SilentlyContinue) {
                    Compress-Archive -Path "*" -DestinationPath $ZipPath -Force
                    Write-Success "Created $PackageName.zip"
                } else {
                    Write-Warning "Compress-Archive not available, skipping Windows package"
                }
            } else {
                # Create tar.gz for Unix systems (requires external tar)
                $TarPath = Join-Path ".." "$PackageName.tar.gz"
                if (Get-Command tar -ErrorAction SilentlyContinue) {
                    & tar -czf $TarPath *
                    if ($LASTEXITCODE -eq 0) {
                        Write-Success "Created $PackageName.tar.gz"
                    } else {
                        Write-Warning "Failed to create tar.gz package"
                    }
                } else {
                    Write-Warning "tar command not found, skipping Unix package"
                }
            }
        } finally {
            Pop-Location
        }
    }
}

# Show build summary
function Show-Summary {
    Write-Info "Build Summary:"
    Write-Host
    
    if (Test-Path $DistDir) {
        Write-Host "Generated files:"
        Get-ChildItem -Recurse $DistDir -Name "$ProjectName*" | ForEach-Object {
            $FilePath = Join-Path $DistDir $_
            $Size = [math]::Round((Get-Item $FilePath).Length / 1KB, 2)
            Write-Host "  $FilePath ($Size KB)"
        }
        Write-Host
        
        Write-Host "Distribution packages:"
        Get-ChildItem $DistDir -Name "*.zip", "*.tar.gz" | ForEach-Object {
            $FilePath = Join-Path $DistDir $_
            $Size = [math]::Round((Get-Item $FilePath).Length / 1KB, 2)
            Write-Host "  $FilePath ($Size KB)"
        }
    } else {
        Write-Warning "No build output found"
    }
}

# Show help
function Show-Help {
    Write-Host "Usage: .\build.ps1 [command] [options]"
    Write-Host
    Write-Host "Commands:"
    Write-Host "  clean    - Clean previous builds"
    Write-Host "  check    - Check prerequisites"
    Write-Host "  build    - Build for all platforms"
    Write-Host "  package  - Create distribution packages"
    Write-Host "  all      - Run complete build pipeline (default)"
    Write-Host "  help     - Show this help message"
    Write-Host
    Write-Host "Parameters:"
    Write-Host "  -Version    Set build version (default: v0.1.0-dev)"
    Write-Host "  -GitCommit  Set git commit hash (auto-detected)"
    Write-Host
    Write-Host "Examples:"
    Write-Host "  .\build.ps1 all -Version 'v1.0.0'"
    Write-Host "  .\build.ps1 build"
    Write-Host "  .\build.ps1 clean"
}

# Main execution
switch ($Command.ToLower()) {
    "clean" {
        Invoke-Clean
    }
    "check" {
        Test-Prerequisites
    }
    "build" {
        Test-Prerequisites
        $success = Invoke-BuildAll
        if (-not $success) { exit 1 }
    }
    "package" {
        Invoke-Package
    }
    "all" {
        Test-Prerequisites
        Invoke-Clean
        $success = Invoke-BuildAll
        if (-not $success) { exit 1 }
        Invoke-Package
        Show-Summary
    }
    { $_ -in @("help", "-h", "--help", "?") } {
        Show-Help
    }
    default {
        Write-Error "Unknown command: $Command"
        Write-Host "Use '.\build.ps1 help' for usage information"
        exit 1
    }
} 