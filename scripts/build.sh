#!/bin/bash

# Cross-platform build script for Go DWG Extractor
# Generated by the build system - supports Windows, Linux, and macOS builds

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="go-dwg-extractor"
DIST_DIR="dist"
VERSION=${VERSION:-"v0.1.0-dev"}
BUILD_TIME=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
GIT_COMMIT=${GIT_COMMIT:-$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")}

# Build platforms
PLATFORMS=(
    "windows/amd64"
    "linux/amd64"
    "darwin/amd64"
    "darwin/arm64"
)

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    if ! command -v go &> /dev/null; then
        log_error "Go is not installed or not in PATH"
        exit 1
    fi
    
    if ! command -v git &> /dev/null; then
        log_warning "Git is not installed - version info may be incomplete"
    fi
    
    log_success "Prerequisites check completed"
}

# Clean previous builds
clean() {
    log_info "Cleaning previous builds..."
    rm -rf "${DIST_DIR}"
    log_success "Clean completed"
}

# Build for a specific platform
build_platform() {
    local platform=$1
    local goos=$(echo $platform | cut -d'/' -f1)
    local goarch=$(echo $platform | cut -d'/' -f2)
    
    local output_name="${PROJECT_NAME}"
    if [ "$goos" = "windows" ]; then
        output_name="${output_name}.exe"
    fi
    
    local output_dir="${DIST_DIR}/${goos}-${goarch}"
    local output_path="${output_dir}/${output_name}"
    
    log_info "Building for ${goos}/${goarch}..."
    
    # Create output directory
    mkdir -p "${output_dir}"
    
    # Build with version information
    local ldflags="-X main.version=${VERSION} -X main.gitCommit=${GIT_COMMIT} -X main.buildTime=${BUILD_TIME}"
    
    GOOS=$goos GOARCH=$goarch go build \
        -ldflags "${ldflags}" \
        -o "${output_path}" \
        .
    
    if [ $? -eq 0 ]; then
        log_success "Built ${output_path}"
        
        # Copy additional files
        cp README.md "${output_dir}/" 2>/dev/null || log_warning "README.md not found"
        cp LICENSE "${output_dir}/" 2>/dev/null || log_warning "LICENSE not found"
        
        return 0
    else
        log_error "Failed to build for ${goos}/${goarch}"
        return 1
    fi
}

# Build all platforms
build_all() {
    log_info "Starting cross-platform build..."
    log_info "Version: ${VERSION}"
    log_info "Git Commit: ${GIT_COMMIT}"
    log_info "Build Time: ${BUILD_TIME}"
    echo
    
    local failed_builds=()
    
    for platform in "${PLATFORMS[@]}"; do
        if ! build_platform "$platform"; then
            failed_builds+=("$platform")
        fi
        echo
    done
    
    if [ ${#failed_builds[@]} -eq 0 ]; then
        log_success "All builds completed successfully!"
    else
        log_error "Some builds failed: ${failed_builds[*]}"
        exit 1
    fi
}

# Create packages
package() {
    log_info "Creating distribution packages..."
    
    for platform in "${PLATFORMS[@]}"; do
        local goos=$(echo $platform | cut -d'/' -f1)
        local goarch=$(echo $platform | cut -d'/' -f2)
        local build_dir="${DIST_DIR}/${goos}-${goarch}"
        
        if [ ! -d "$build_dir" ]; then
            log_warning "Build directory $build_dir not found, skipping packaging"
            continue
        fi
        
        local package_name="${PROJECT_NAME}-${goos}-${goarch}"
        
        cd "$build_dir"
        
        if [ "$goos" = "windows" ]; then
            # Create ZIP for Windows
            if command -v zip &> /dev/null; then
                zip -r "../${package_name}.zip" .
                log_success "Created ${package_name}.zip"
            else
                log_warning "zip command not found, skipping Windows package"
            fi
        else
            # Create tar.gz for Unix systems
            tar -czf "../${package_name}.tar.gz" .
            log_success "Created ${package_name}.tar.gz"
        fi
        
        cd - > /dev/null
    done
}

# Show build summary
summary() {
    log_info "Build Summary:"
    echo
    
    if [ -d "$DIST_DIR" ]; then
        echo "Generated files:"
        find "$DIST_DIR" -type f -name "${PROJECT_NAME}*" | while read -r file; do
            local size=$(du -h "$file" | cut -f1)
            echo "  $file ($size)"
        done
        echo
        
        echo "Distribution packages:"
        find "$DIST_DIR" -type f \( -name "*.zip" -o -name "*.tar.gz" \) | while read -r file; do
            local size=$(du -h "$file" | cut -f1)
            echo "  $file ($size)"
        done
    else
        log_warning "No build output found"
    fi
}

# Main execution
main() {
    case "${1:-all}" in
        "clean")
            clean
            ;;
        "check")
            check_prerequisites
            ;;
        "build")
            check_prerequisites
            build_all
            ;;
        "package")
            package
            ;;
        "all")
            check_prerequisites
            clean
            build_all
            package
            summary
            ;;
        "help"|"-h"|"--help")
            echo "Usage: $0 [command]"
            echo
            echo "Commands:"
            echo "  clean    - Clean previous builds"
            echo "  check    - Check prerequisites"
            echo "  build    - Build for all platforms"
            echo "  package  - Create distribution packages"
            echo "  all      - Run complete build pipeline (default)"
            echo "  help     - Show this help message"
            echo
            echo "Environment variables:"
            echo "  VERSION     - Set build version (default: v0.1.0-dev)"
            echo "  GIT_COMMIT  - Set git commit hash (auto-detected)"
            ;;
        *)
            log_error "Unknown command: $1"
            echo "Use '$0 help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function
main "$@" 